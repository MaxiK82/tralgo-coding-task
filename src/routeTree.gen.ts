/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainLayoutImport } from './routes/_mainLayout'
import { Route as AcademyLayoutImport } from './routes/_academyLayout'
import { Route as MainLayoutIndexImport } from './routes/_mainLayout.index'
import { Route as MainLayoutResultsImport } from './routes/_mainLayout.results'
import { Route as AcademyLayoutAcademyImport } from './routes/_academyLayout.academy'

// Create/Update Routes

const MainLayoutRoute = MainLayoutImport.update({
  id: '/_mainLayout',
  getParentRoute: () => rootRoute,
} as any)

const AcademyLayoutRoute = AcademyLayoutImport.update({
  id: '/_academyLayout',
  getParentRoute: () => rootRoute,
} as any)

const MainLayoutIndexRoute = MainLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainLayoutRoute,
} as any)

const MainLayoutResultsRoute = MainLayoutResultsImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => MainLayoutRoute,
} as any)

const AcademyLayoutAcademyRoute = AcademyLayoutAcademyImport.update({
  id: '/academy',
  path: '/academy',
  getParentRoute: () => AcademyLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_academyLayout': {
      id: '/_academyLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AcademyLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_mainLayout': {
      id: '/_mainLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_academyLayout/academy': {
      id: '/_academyLayout/academy'
      path: '/academy'
      fullPath: '/academy'
      preLoaderRoute: typeof AcademyLayoutAcademyImport
      parentRoute: typeof AcademyLayoutImport
    }
    '/_mainLayout/results': {
      id: '/_mainLayout/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof MainLayoutResultsImport
      parentRoute: typeof MainLayoutImport
    }
    '/_mainLayout/': {
      id: '/_mainLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainLayoutIndexImport
      parentRoute: typeof MainLayoutImport
    }
  }
}

// Create and export the route tree

interface AcademyLayoutRouteChildren {
  AcademyLayoutAcademyRoute: typeof AcademyLayoutAcademyRoute
}

const AcademyLayoutRouteChildren: AcademyLayoutRouteChildren = {
  AcademyLayoutAcademyRoute: AcademyLayoutAcademyRoute,
}

const AcademyLayoutRouteWithChildren = AcademyLayoutRoute._addFileChildren(
  AcademyLayoutRouteChildren,
)

interface MainLayoutRouteChildren {
  MainLayoutResultsRoute: typeof MainLayoutResultsRoute
  MainLayoutIndexRoute: typeof MainLayoutIndexRoute
}

const MainLayoutRouteChildren: MainLayoutRouteChildren = {
  MainLayoutResultsRoute: MainLayoutResultsRoute,
  MainLayoutIndexRoute: MainLayoutIndexRoute,
}

const MainLayoutRouteWithChildren = MainLayoutRoute._addFileChildren(
  MainLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof MainLayoutRouteWithChildren
  '/academy': typeof AcademyLayoutAcademyRoute
  '/results': typeof MainLayoutResultsRoute
  '/': typeof MainLayoutIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AcademyLayoutRouteWithChildren
  '/academy': typeof AcademyLayoutAcademyRoute
  '/results': typeof MainLayoutResultsRoute
  '/': typeof MainLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_academyLayout': typeof AcademyLayoutRouteWithChildren
  '/_mainLayout': typeof MainLayoutRouteWithChildren
  '/_academyLayout/academy': typeof AcademyLayoutAcademyRoute
  '/_mainLayout/results': typeof MainLayoutResultsRoute
  '/_mainLayout/': typeof MainLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/academy' | '/results' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/academy' | '/results' | '/'
  id:
    | '__root__'
    | '/_academyLayout'
    | '/_mainLayout'
    | '/_academyLayout/academy'
    | '/_mainLayout/results'
    | '/_mainLayout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AcademyLayoutRoute: typeof AcademyLayoutRouteWithChildren
  MainLayoutRoute: typeof MainLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AcademyLayoutRoute: AcademyLayoutRouteWithChildren,
  MainLayoutRoute: MainLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_academyLayout",
        "/_mainLayout"
      ]
    },
    "/_academyLayout": {
      "filePath": "_academyLayout.tsx",
      "children": [
        "/_academyLayout/academy"
      ]
    },
    "/_mainLayout": {
      "filePath": "_mainLayout.tsx",
      "children": [
        "/_mainLayout/results",
        "/_mainLayout/"
      ]
    },
    "/_academyLayout/academy": {
      "filePath": "_academyLayout.academy.tsx",
      "parent": "/_academyLayout"
    },
    "/_mainLayout/results": {
      "filePath": "_mainLayout.results.tsx",
      "parent": "/_mainLayout"
    },
    "/_mainLayout/": {
      "filePath": "_mainLayout.index.tsx",
      "parent": "/_mainLayout"
    }
  }
}
ROUTE_MANIFEST_END */
